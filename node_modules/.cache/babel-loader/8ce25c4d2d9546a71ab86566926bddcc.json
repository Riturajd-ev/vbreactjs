{"ast":null,"code":"import PropTypes from \"prop-types\";\nimport React, { cloneElement, useRef, useId } from \"react\";\nimport cx from \"clsx\";\nimport { childrenPropType } from \"../helpers/propTypes\";\nimport { getTabsCount as getTabsCountHelper } from \"../helpers/count\";\nimport { deepMap } from \"../helpers/childrenDeepMap\";\nimport { isTabList, isTabPanel, isTab } from \"../helpers/elementTypes\";\nfunction isNode(node) {\n  return node && \"getAttribute\" in node;\n}\nfunction isTabNode(node) {\n  return isNode(node) && node.getAttribute(\"data-rttab\");\n}\nfunction isTabDisabled(node) {\n  return isNode(node) && node.getAttribute(\"aria-disabled\") === \"true\";\n}\nlet canUseActiveElement;\nfunction determineCanUseActiveElement(environment) {\n  const env = environment || (typeof window !== \"undefined\" ? window : undefined);\n  try {\n    canUseActiveElement = !!(typeof env !== \"undefined\" && env.document && env.document.activeElement);\n  } catch (e) {\n    canUseActiveElement = false;\n  }\n}\nconst defaultProps = {\n  className: \"react-tabs\",\n  focus: false\n};\nconst propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: childrenPropType,\n  direction: PropTypes.oneOf([\"rtl\", \"ltr\"]),\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  disabledTabClassName: PropTypes.string,\n  disableUpDownKeys: PropTypes.bool,\n  disableLeftRightKeys: PropTypes.bool,\n  domRef: PropTypes.func,\n  focus: PropTypes.bool,\n  forceRenderTabPanel: PropTypes.bool,\n  onSelect: PropTypes.func.isRequired,\n  selectedIndex: PropTypes.number.isRequired,\n  selectedTabClassName: PropTypes.string,\n  selectedTabPanelClassName: PropTypes.string,\n  environment: PropTypes.object\n} : {};\nconst UncontrolledTabs = props => {\n  let tabNodes = useRef([]);\n  let tabIds = useRef([]);\n  const ref = useRef();\n  function setSelected(index, event) {\n    if (index < 0 || index >= getTabsCount()) return;\n    const {\n      onSelect,\n      selectedIndex\n    } = props;\n    onSelect(index, selectedIndex, event);\n  }\n  function getNextTab(index) {\n    const count = getTabsCount();\n    for (let i = index + 1; i < count; i++) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n    for (let i = 0; i < index; i++) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n    return index;\n  }\n  function getPrevTab(index) {\n    let i = index;\n    while (i--) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n    i = getTabsCount();\n    while (i-- > index) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n    return index;\n  }\n  function getFirstTab() {\n    const count = getTabsCount();\n    for (let i = 0; i < count; i++) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n    return null;\n  }\n  function getLastTab() {\n    let i = getTabsCount();\n    while (i--) {\n      if (!isTabDisabled(getTab(i))) {\n        return i;\n      }\n    }\n    return null;\n  }\n  function getTabsCount() {\n    const {\n      children\n    } = props;\n    return getTabsCountHelper(children);\n  }\n  function getTab(index) {\n    return tabNodes.current[`tabs-${index}`];\n  }\n  function getChildren() {\n    let index = 0;\n    const {\n      children,\n      disabledTabClassName,\n      focus,\n      forceRenderTabPanel,\n      selectedIndex,\n      selectedTabClassName,\n      selectedTabPanelClassName,\n      environment\n    } = props;\n    tabIds.current = tabIds.current || [];\n    let diff = tabIds.current.length - getTabsCount();\n    const id = useId();\n    while (diff++ < 0) {\n      tabIds.current.push(`${id}${tabIds.current.length}`);\n    }\n    return deepMap(children, child => {\n      let result = child;\n      if (isTabList(child)) {\n        let listIndex = 0;\n        let wasTabFocused = false;\n        if (canUseActiveElement == null) {\n          determineCanUseActiveElement(environment);\n        }\n        const env = environment || (typeof window !== \"undefined\" ? window : undefined);\n        if (canUseActiveElement && env) {\n          wasTabFocused = React.Children.toArray(child.props.children).filter(isTab).some((tab, i) => env.document.activeElement === getTab(i));\n        }\n        result = cloneElement(child, {\n          children: deepMap(child.props.children, tab => {\n            const key = `tabs-${listIndex}`;\n            const selected = selectedIndex === listIndex;\n            const props = {\n              tabRef: node => {\n                tabNodes.current[key] = node;\n              },\n              id: tabIds.current[listIndex],\n              selected,\n              focus: selected && (focus || wasTabFocused)\n            };\n            if (selectedTabClassName) props.selectedClassName = selectedTabClassName;\n            if (disabledTabClassName) props.disabledClassName = disabledTabClassName;\n            listIndex++;\n            return cloneElement(tab, props);\n          })\n        });\n      } else if (isTabPanel(child)) {\n        const props = {\n          id: tabIds.current[index],\n          selected: selectedIndex === index\n        };\n        if (forceRenderTabPanel) props.forceRender = forceRenderTabPanel;\n        if (selectedTabPanelClassName) props.selectedClassName = selectedTabPanelClassName;\n        index++;\n        result = cloneElement(child, props);\n      }\n      return result;\n    });\n  }\n  function handleKeyDown(e) {\n    const {\n      direction,\n      disableUpDownKeys,\n      disableLeftRightKeys\n    } = props;\n    if (isTabFromContainer(e.target)) {\n      let {\n        selectedIndex: index\n      } = props;\n      let preventDefault = false;\n      let useSelectedIndex = false;\n      if (e.code === \"Space\" || e.keyCode === 32 || e.code === \"Enter\" || e.keyCode === 13) {\n        preventDefault = true;\n        useSelectedIndex = false;\n        handleClick(e);\n      }\n      if (!disableLeftRightKeys && (e.keyCode === 37 || e.code === \"ArrowLeft\") || !disableUpDownKeys && (e.keyCode === 38 || e.code === \"ArrowUp\")) {\n        if (direction === \"rtl\") {\n          index = getNextTab(index);\n        } else {\n          index = getPrevTab(index);\n        }\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (!disableLeftRightKeys && (e.keyCode === 39 || e.code === \"ArrowRight\") || !disableUpDownKeys && (e.keyCode === 40 || e.code === \"ArrowDown\")) {\n        if (direction === \"rtl\") {\n          index = getPrevTab(index);\n        } else {\n          index = getNextTab(index);\n        }\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 35 || e.code === \"End\") {\n        index = getLastTab();\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 36 || e.code === \"Home\") {\n        index = getFirstTab();\n        preventDefault = true;\n        useSelectedIndex = true;\n      }\n      if (preventDefault) {\n        e.preventDefault();\n      }\n      if (useSelectedIndex) {\n        setSelected(index, e);\n      }\n    }\n  }\n  function handleClick(e) {\n    let node = e.target;\n    do {\n      if (isTabFromContainer(node)) {\n        if (isTabDisabled(node)) {\n          return;\n        }\n        const index = [].slice.call(node.parentNode.children).filter(isTabNode).indexOf(node);\n        setSelected(index, e);\n        return;\n      }\n    } while ((node = node.parentNode) != null);\n  }\n  function isTabFromContainer(node) {\n    if (!isTabNode(node)) {\n      return false;\n    }\n    let nodeAncestor = node.parentElement;\n    do {\n      if (nodeAncestor === ref.current) return true;\n      if (nodeAncestor.getAttribute(\"data-rttabs\")) break;\n      nodeAncestor = nodeAncestor.parentElement;\n    } while (nodeAncestor);\n    return false;\n  }\n  const {\n    children,\n    className,\n    disabledTabClassName,\n    domRef,\n    focus,\n    forceRenderTabPanel,\n    onSelect,\n    selectedIndex,\n    selectedTabClassName,\n    selectedTabPanelClassName,\n    environment,\n    disableUpDownKeys,\n    disableLeftRightKeys,\n    ...attributes\n  } = props;\n  return React.createElement(\"div\", Object.assign({}, attributes, {\n    className: cx(className),\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n    ref: node => {\n      ref.current = node;\n      if (domRef) domRef(node);\n    },\n    \"data-rttabs\": true\n  }), getChildren());\n};\nUncontrolledTabs.defaultProps = defaultProps;\nUncontrolledTabs.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nexport default UncontrolledTabs;","map":null,"metadata":{},"sourceType":"module"}