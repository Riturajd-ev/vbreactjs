{"ast":null,"code":"import PropTypes from \"prop-types\";\nimport React, { useEffect, useRef } from \"react\";\nimport cx from \"clsx\";\nconst DEFAULT_CLASS = \"react-tabs__tab\";\nconst defaultProps = {\n  className: DEFAULT_CLASS,\n  disabledClassName: `${DEFAULT_CLASS}--disabled`,\n  focus: false,\n  id: null,\n  selected: false,\n  selectedClassName: `${DEFAULT_CLASS}--selected`\n};\nconst propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  disabled: PropTypes.bool,\n  disabledClassName: PropTypes.string,\n  focus: PropTypes.bool,\n  id: PropTypes.string,\n  selected: PropTypes.bool,\n  selectedClassName: PropTypes.string,\n  tabIndex: PropTypes.string,\n  tabRef: PropTypes.func\n} : {};\nconst Tab = props => {\n  let nodeRef = useRef();\n  const {\n    children,\n    className,\n    disabled,\n    disabledClassName,\n    focus,\n    id,\n    selected,\n    selectedClassName,\n    tabIndex,\n    tabRef,\n    ...attributes\n  } = props;\n  useEffect(() => {\n    if (selected && focus) {\n      nodeRef.current.focus();\n    }\n  }, [selected, focus]);\n  return React.createElement(\"li\", Object.assign({}, attributes, {\n    className: cx(className, {\n      [selectedClassName]: selected,\n      [disabledClassName]: disabled\n    }),\n    ref: node => {\n      nodeRef.current = node;\n      if (tabRef) tabRef(node);\n    },\n    role: \"tab\",\n    id: `tab${id}`,\n    \"aria-selected\": selected ? \"true\" : \"false\",\n    \"aria-disabled\": disabled ? \"true\" : \"false\",\n    \"aria-controls\": `panel${id}`,\n    tabIndex: tabIndex || (selected ? \"0\" : null),\n    \"data-rttab\": true\n  }), children);\n};\nTab.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nTab.tabsRole = \"Tab\";\nTab.defaultProps = defaultProps;\nexport default Tab;","map":null,"metadata":{},"sourceType":"module"}