{"ast":null,"code":"import PropTypes from \"prop-types\";\nimport React, { useEffect, useState } from \"react\";\nimport { childrenPropType, onSelectPropType, selectedIndexPropType } from \"../helpers/propTypes\";\nimport UncontrolledTabs from \"./UncontrolledTabs\";\nimport { getTabsCount } from \"../helpers/count\";\nconst MODE_CONTROLLED = 0;\nconst MODE_UNCONTROLLED = 1;\nconst propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: childrenPropType,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  defaultFocus: PropTypes.bool,\n  defaultIndex: PropTypes.number,\n  direction: PropTypes.oneOf([\"rtl\", \"ltr\"]),\n  disabledTabClassName: PropTypes.string,\n  disableUpDownKeys: PropTypes.bool,\n  disableLeftRightKeys: PropTypes.bool,\n  domRef: PropTypes.func,\n  environment: PropTypes.object,\n  focusTabOnClick: PropTypes.bool,\n  forceRenderTabPanel: PropTypes.bool,\n  onSelect: onSelectPropType,\n  selectedIndex: selectedIndexPropType,\n  selectedTabClassName: PropTypes.string,\n  selectedTabPanelClassName: PropTypes.string\n} : {};\nconst defaultProps = {\n  defaultFocus: false,\n  focusTabOnClick: true,\n  forceRenderTabPanel: false,\n  selectedIndex: null,\n  defaultIndex: null,\n  environment: null,\n  disableUpDownKeys: false,\n  disableLeftRightKeys: false\n};\nconst getModeFromProps = props => {\n  return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;\n};\nconst checkForIllegalModeChange = (props, mode) => {\n  if (process.env.NODE_ENV !== \"production\" && mode != undefined && mode !== getModeFromProps(props)) {\n    throw new Error(`Switching between controlled mode (by using \\`selectedIndex\\`) and uncontrolled mode is not supported in \\`Tabs\\`.\nFor more information about controlled and uncontrolled mode of react-tabs see https://github.com/reactjs/react-tabs#controlled-vs-uncontrolled-mode.`);\n  }\n};\nconst Tabs = props => {\n  const {\n    children,\n    defaultFocus,\n    defaultIndex,\n    focusTabOnClick,\n    onSelect\n  } = props;\n  const [focus, setFocus] = useState(defaultFocus);\n  const [mode] = useState(getModeFromProps(props));\n  const [selectedIndex, setSelectedIndex] = useState(mode === MODE_UNCONTROLLED ? defaultIndex || 0 : null);\n  useEffect(() => {\n    setFocus(false);\n  }, []);\n  if (mode === MODE_UNCONTROLLED) {\n    const tabsCount = getTabsCount(children);\n    useEffect(() => {\n      if (selectedIndex != null) {\n        const maxTabIndex = Math.max(0, tabsCount - 1);\n        setSelectedIndex(Math.min(selectedIndex, maxTabIndex));\n      }\n    }, [tabsCount]);\n  }\n  checkForIllegalModeChange(props, mode);\n  const handleSelected = (index, last, event) => {\n    if (typeof onSelect === \"function\") {\n      if (onSelect(index, last, event) === false) return;\n    }\n    if (focusTabOnClick) {\n      setFocus(true);\n    }\n    if (mode === MODE_UNCONTROLLED) {\n      setSelectedIndex(index);\n    }\n  };\n  let subProps = {\n    ...props\n  };\n  subProps.focus = focus;\n  subProps.onSelect = handleSelected;\n  if (selectedIndex != null) {\n    subProps.selectedIndex = selectedIndex;\n  }\n  delete subProps.defaultFocus;\n  delete subProps.defaultIndex;\n  delete subProps.focusTabOnClick;\n  return React.createElement(UncontrolledTabs, subProps, children);\n};\nTabs.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nTabs.defaultProps = defaultProps;\nTabs.tabsRole = \"Tabs\";\nexport default Tabs;","map":null,"metadata":{},"sourceType":"module"}